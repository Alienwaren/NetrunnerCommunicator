		/// <summary>
        /// Konstruktor domyślny 
        /// </summary>
        public Button(Vector2f initialButtonPosition)
        {
         
            if (loadButton()) //ładowanie guzika
            {
                Console.WriteLine("Success!");
                bindTexture();
            }
            else
            {
                Console.WriteLine("Failed!");
            }
            initAttributes(initialButtonPosition); // inicjacja atrybutów guzika 
            
        }
        /// <summary>
        /// Inicjacja guzika, razem z jego podpisem. Jest to konstruktor przeciążony do poprzedniego
        /// </summary>
        /// <param name="initialButtonPosition">Domyślna pozycja guzika</param>
        /// <param name="fontFilename">Nazwa czcionki</param>
        /// <param name="labelText">Napis do wyświetlenia</param>
        public Button(Vector2f initialButtonPosition, string fontFilename, string labelText)
        {

            if (loadButton()) //ładowanie guzika
            {
                Console.WriteLine("Success!");
                bindTexture();
            }
            else
            {
                Console.WriteLine("Failed!");
            }
            initAttributes(initialButtonPosition); // inicjacja atrybutów guzika 

            if (initLabels(fontFilename, labelText)) //inicjacja podpisów guzika
            {
                Console.WriteLine("Success!");
            }
            else
            {
                Console.WriteLine("Failed!");
            }
        }
        /// <summary>
        /// Kolor guzika
        /// </summary>
        protected Color buttonColor = new Color();
        /// <summary>
        /// Inicjacja atrybutów guzika
        /// </summary>
        protected void initAttributes(Vector2f buttonPosition)
        {
            buttonSprite.Origin = new Vector2f(buttonSprite.GetGlobalBounds().Height / 2, buttonSprite.GetGlobalBounds().Width / 2);
            buttonImagePosition = buttonPosition; //ustawienie guzika na swoje miejsce
            buttonSprite.Scale = new Vector2f(0.5F, 0.5F);
        }
        /// <summary>
        /// Tesktura guzika
        /// </summary>
        protected Texture buttonTexture;
        /// <summary>
        /// Ładowanie do guzika do pamięci
        /// </summary>
        /// <returns>Zwraca stan powodzenia</returns>
        protected virtual Boolean loadButton()
        {
            try
            {
                Console.Write("Loading exit button image...");
                buttonTexture = new Texture("../../Resources/Graphics/buttons_texture.png");
                return true;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
            }
            return false;
        }
        /// <summary>
        /// Sprajt guzika
        /// </summary>
        protected Sprite buttonSprite;
        /// <summary>
        /// Zwraca sprite guzika
        /// </summary>
        /// <returns></returns>
        public Sprite getButtonSprite()
        {
            return buttonSprite;
        }
        /// <summary>
        /// Podpięcie tekstury
        /// </summary>
        protected void bindTexture()
        {
            buttonSprite = new Sprite(buttonTexture);
        }
        /// <summary>
        /// Narysowanie guzika w oknie razem z podpisem
        /// </summary>
        /// <param name="drawingWindow">Okno do narysowania</param>
        public void drawButton(RenderWindow drawingWindow)
        {
            drawingWindow.Draw(buttonSprite);
            drawingWindow.Draw(buttonLabel);
        }
        /// <summary>
        /// Pozycja guzika
        /// </summary>
        protected Vector2f buttonImagePosition;
        /// <summary>
        /// Właściwość która pozwala na dobranie się do pozycji obrazka.
        /// </summary>
        public Vector2f buttonPosition
        {
            get
            {
                return buttonImagePosition;
            }
            set
            {
                buttonImagePosition.X = value.X;
                buttonImagePosition.Y = value.Y;
            }
        }
        /// <summary>
        /// Aktualizacja przycisku
        /// </summary>
        public void update()
        {
            setBoundingBox();
            buttonSprite.Position = buttonImagePosition;
        }
        /// <summary>
        /// Bounding box guzika
        /// </summary>
        protected FloatRect globalBounds;
        /// <summary>
        /// Włączenie boksa kolizji
        /// </summary>
        protected void setBoundingBox()
        {
            globalBounds = buttonSprite.GetGlobalBounds();
        }
        /// <summary>
        /// Funkcja implementująca reakcję na klik. Sprawdza pole clickAmount i w zaleznosci od ilosci klikniec zmienia na rozny kolor.
        /// </summary>
        public void onClick(RenderWindow buttonRenderWindow)
        {
                buttonColor = new Color(255,255,255, 128);
                this.buttonSprite.Color = buttonColor;
                buttonRenderWindow.Close(); 
        }
        /// <summary>
        /// Czcionka podpisu guzika
        /// </summary>
        protected Font buttonLabelFont;
        /// <summary>
        /// Podpis guzika
        /// </summary>
        protected Text buttonLabel = new Text();
        /// <summary>
        /// Ustawia parametry podpisu
        /// </summary>
        /// <param name="filename">Czcionka napisu</param>
        /// <param name="labelText">Tekst który zosanie wyświetlony</param>
        /// <returns>Zwraca czy sie udało</returns>
        protected Boolean initLabels(string filename, string labelText)
        {
            try
            {
                Console.Write("Loading button label font...");
                buttonLabelFont = new Font(filename);
                buttonLabel.Font = buttonLabelFont;
                buttonLabel.CharacterSize = 16;
                buttonLabel.DisplayedString = labelText;
                buttonLabel.Origin = new Vector2f(this.buttonLabel.GetGlobalBounds().Height / 2, this.buttonLabel.GetGlobalBounds().Width / 2);
                buttonLabel.Position = new Vector2f(this.buttonImagePosition.X - 12, this.buttonImagePosition.Y + 45);
                return true;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
            }
            return false;
        }
       
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// <summary>
        /// Konstruktor domyślny. Nie do użycia bo prywatny
        /// </summary>
        private TemperatureReceiver()
        {
            
        }
        /// <summary>
        /// Konstruktor przeciążony. Inicjuje parametry serwera oraz je wyświetla.
        /// </summary>
        /// <param name="serverIp">IP na którym ma server.</param>
        /// <param name="port">Port serwera na którym server stoi</param>
        public TemperatureReceiver(string serverIp, int port)
        {
            Console.Write("Initiating temperature server receiver...");
            if (initServer(serverIp, port))
            {
                Console.WriteLine("Success!");
                tcpListener.Start(5);
                
            }
            else
            {
                Console.WriteLine("Failed!");
            }
            printParameters();
        }
        /// <summary>
        /// Adres IP serwera
        /// </summary>
        private IPAddress servIp;
        /// <summary>
        /// Nasłuchiwacz na TCP
        /// </summary>
        private TcpListener tcpListener;
        /// <summary>
        /// Port servera
        /// </summary>
        private int serverPort = 0;
        /// <summary>
        /// Inicjuje dzialanie servera
        /// </summary>
        /// <returns>Zwraca stan inicjacji</returns>
        private Boolean initServer(string serverIp, int port)
        {
            serverPort = port;
            try
            {
                servIp = IPAddress.Parse(serverIp); //przypisanie adresu ip serwera
                try
                {
                    tcpListener = new TcpListener(servIp, serverPort); //uruchomienie nasłuchwiacza
                    return true;
                }
                catch(Exception e)
                {
                    Console.WriteLine("/n" + e.ToString());
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("/n" + e.ToString());
            }
            return false;
        }
        /// <summary>
        /// Wyświetlenie parametrów serwera
        /// </summary>
        private void printParameters()
        {
            Console.Write("Server is at: ");
            Console.WriteLine(this.servIp.ToString() + ":" + this.serverPort);
        }
        /// <summary>
        /// Licznik który w razie w przerwie łączenie się
        /// </summary>
        Timer connectionTimeout = new Timer(500);
        /// <summary>
        /// Czy pętla działa
        /// </summary>
        Boolean running = false;
        /// <summary>
        /// Gniazdo służące do połączeń
        /// </summary>
        Socket serverSocket;
        /// <summary>
        /// Akceptacja połączenia
        /// </summary>
        public void acceptConnection()
        {
            connectionTimeout.Elapsed += connectionTimeout_Elapsed;
            connectionTimeout.Enabled = true;
            running = true;
            while (running)
            {
                serverSocket
            }
            connectionTimeout.Enabled = false;
        }

        void connectionTimeout_Elapsed(object sender, ElapsedEventArgs e)
        {
            running = false;
        }
        
/////////////////////////////////////////////////
private void changeColor()
        {
            if (amountOfClicks == 0)
            {
                
                    Console.WriteLine("Changing status color to: {0}", Color.Red.ToString());
                    base.barColor = this.changedColorAfterClick;
                    this.actualLabelString = changedLabel;
                
                amountOfClicks++;
                return;
            }
            if (amountOfClicks == 1)
            {
                
						Console.WriteLine("Changing status color to: {0}", Color.Green.ToString());
						base.barColor = this.normalColor;
						this.actualLabelString = standardLabel;
                    
                amountOfClicks = 0;
                return;
            }
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// <summary>
        /// Konstruktor który uruchamia serwer
        /// </summary>
        /// <param name="port">Port na którym serwer powstanie</param>
        /// <param name="ip">Adres serwera na którym stoi</param>
        /// <param name="clientIP">Adres klienta.</param>
        public TemperatureReceiver(int port, string ip, string clientIP)
        {
            this.clientIpString = clientIP;
            this.clientIP = IPAddress.Parse(this.clientIpString);
            populateResponses(); //wypełnianmy odpowiedzi
            try
            {
                this.port = port;
                this.serverAddr = IPAddress.Parse(ip); // przypisanie IP
                receiverListener = new TcpListener(serverAddr, this.port); //uruchomienie portu
            }
            catch(Exception e)
            {
                Console.WriteLine(e.ToString());
            }
            
        }
        /// <summary>
        /// Kontruktor ładujący konfigurację klient'a i serwera z pliku Server.conf.
        /// </summary>
        /// <param name="port">Port na którym będzie stał.</param>
        public TemperatureReceiver(int port)
        {
            programIps = serverConf.getConfigurationIp();
            try
            {
                this.clientIP = IPAddress.Parse(programIps[0]);
                populateResponses(); //wypełnianmy odpowiedzi
                this.port = port;
                this.serverAddr = IPAddress.Parse(programIps[1]); // przypisanie IP
                receiverListener = new TcpListener(serverAddr, this.port); //uruchomienie portu
                foreach (string a in this.programIps)
                {
                    Console.Write("Read Ips: ");
                    Console.WriteLine(a);
                }
                serverConf.Dispose();
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
            }
            programIps.Clear();
        }
        /// <summary>
        /// Configuracja serwera
        /// </summary>
        Configuration serverConf = new Configuration("Conf/Server.conf");
        /// <summary>
        /// Spis adresów serwera
        /// </summary>
        List<String> programIps = new List<String>();
        /// <summary>
        /// Bufor zapisu
        /// </summary>
        List<Byte> writeBuffer = new List<Byte>();
        /// <summary>
        /// Otrzymane dane.
        /// </summary>
        List<String> receivedData = new List<String>();
        /// <summary>
        /// Możliwe odpowiedzi
        /// </summary>
        List<String> responses = new List<string>();
        /// <summary>
        /// Wypełnienie listy odpowiedziami
        /// </summary>
        private void populateResponses()
        {
            responses.Add("RDY");
            responses.Add("DATA");
            responses.Add("END");
        }
        /// <summary>
        /// Adres IP serwera
        /// </summary>
        IPAddress serverAddr;
        /// <summary>
        /// Dane..?
        /// </summary>
        private byte[] data = new byte[5];
        /// <summary>
        /// Nasłuchiwanie na protokole TCP
        /// </summary>
        private TcpListener receiverListener;
        /// <summary>
        /// Klient służący do odpowiadania na dane
        /// </summary>
        private TcpClient responseClient;
        /// <summary>
        /// Port na którym działa serwer.
        /// </summary>
        private int port = 0;
        /// <summary>
        /// Maksymalna ilość połączeń do serwera
        /// </summary>
        private int maxConnectionsToServer = 0;
        /// <summary>
        /// Czy serwer wystartowal
        /// </summary>
        private Boolean isServerStarted = false;
        /// <summary>
        /// Ilość otrzymanych danych
        /// </summary>
        int amountOfReceivedData = 0;
        /// <summary>
        /// Bufor serwera
        /// </summary>
        private Byte[] recvBuffer = new Byte[100];
        /// <summary>
        /// String adresu IP.
        /// </summary>
        private string clientIpString = "";
        /// <summary>
        /// Adres klienta
        /// </summary>
        private IPAddress clientIP;
        /// <summary>
        /// "Wysyłacz" ICMP pingów
        /// </summary>
        private Ping pingSender = new Ping();
        /// <summary>
        /// Przechowuje odpowiedź serwera
        /// </summary>
        private PingReply pingReply;
        /// <summary>
        /// Odbieracz i wysyłacz.
        /// </summary>
        NetworkStream receiverStream;
        /// <summary>
        /// Przetwarza dane odebrane od metody startServer
        /// </summary>
        /// <returns>Zwraca obiekt temperatury</returns>
        public Temperature receiveData()
        {
            this.writeBuffer.Clear();
            this.receivedData.Clear(); //Oczyszczanko uszanowanko - przypis Domy :D
            //this.receiverResponser = new TcpClient(this.clientIP, 134);
            Console.Write("Received data: ");
            for (int i = 0; i < recvBuffer.Length; i++)
            {
                if (recvBuffer[i] == 0)
                {
                    break;
                }
                writeBuffer.Add(recvBuffer[i]);
            }
            String temp = System.Text.Encoding.UTF8.GetString(writeBuffer.ToArray()); //konwersja na String z byte
            Console.WriteLine(temp);
            Console.Write("Done receiving data.");
            Console.WriteLine("Remembering received data.");
            receivedData.Add(temp);
            Console.WriteLine("Processing data...");
            Temperature processedTemp = processData(); //przetwarzamy
            return processedTemp;
        }
        /// <summary>
        /// Odpowiedź na dane do odczytu
        /// </summary>
        public Temperature processData()
        {
            Temperature tempTemperature = new Temperature();
            if (receivedData.Contains(responses[0])) ///RDY
            {
                Console.WriteLine("Got RDY command. Netrunner Hub is ready for exchanging data.");
                amountOfReceivedData += receiverStream.Read(recvBuffer, 0, recvBuffer.Length);
                foreach (var item in receivedData)
                {
                    if (item.Contains(responses[1]))
                    {
                        Console.WriteLine("Processed DATA command. Next packet will be treated as status data of Netrunner Hub\n and Netrunner itself");
                    }
                    if(item.Contains(responses[2]))
                    {
                        Console.WriteLine("Processed END command. Ending data processing, thus this is end of them");
                        receivedData.Clear();
                        break;
                    }
                }
            }
            else
            {
                Console.WriteLine("Didn't receive RDY command. Ignoring data, it be from unknown source");
            }
            return tempTemperature;
        }
        /// <summary>
        /// Wystartowanie serwera
        /// </summary>
        /// <param name="maxConnections">Maksymalna ilość połączeń do serwera</param>
        /// <returns>Zwraca kod błędu
        /// 0 - all ok
        /// 1 - nie mozna wystartowac serwera
        /// 2 - nie mozna wyslac pingu
        /// 3 - nie mozna pobrac danych
        /// 4 - ping wysłany, ale nie doszedł
        /// </returns>
        public int startServer(int maxConnections)
        {
            /*
             * TODO: Dodac try...catch, wywalić rzeczy i dodać do pól klasy.
             */
            if (this.isServerStarted == false)
            {
                /// <summary>
                /// Socket serwera.
                /// </summary>
                Socket serverSocket;
                Console.WriteLine("Starting server...");
                maxConnectionsToServer = maxConnections;
                try
                {
                    receiverListener.Start(maxConnectionsToServer);
                    isServerStarted = true;  
                }catch(Exception e)
                {
                    isServerStarted = false;
                    Console.WriteLine("Cannot start server..." + e.ToString());
                    return 1;
                }
                Console.WriteLine("Server started... on {0}", this.serverAddr.ToString());
                Console.WriteLine("Sending Ping request to Netrunner...");
                try
                {
                    pingReply = pingSender.Send(clientIP);
                }catch(Exception e)
                {
                    Console.WriteLine("Cannot send ping..." + e.ToString());
                    return 2;
                }
                if (pingReply.Status == IPStatus.Success)
                {
                    Console.WriteLine("Ping done. Netrunner Hub is online. Starting data Exchange...");
                    Console.WriteLine("Waiting for connection...");
                    try
                    {
                        serverSocket = receiverListener.AcceptSocket();
                        if (serverSocket.Connected == true)
                        {
                            this.receiverStream = new NetworkStream(serverSocket);
                            Console.WriteLine("Connected! Waiting for data...");
                            amountOfReceivedData = receiverStream.Read(recvBuffer, 0, recvBuffer.Length);
                            receiveData();
                            isServerStarted = false;
                        }
                        else
                        {
                            return 0;
                        }
                    }catch(Exception e)
                    {
                        Console.WriteLine("Cannot read data..." + e.ToString());
                        return 3;
                    }
                }
                else
                {
                    Console.WriteLine("Ping Done. Netrunner Hub is offline. Check that Netrunner Hub is connected to\n PC, using network cable.");
                    Console.WriteLine("Closing server...");
                    isServerStarted = false;
                    receiverListener.Stop();
                    return 4;
                }
            }
            else
            {
                Console.WriteLine("Server is already started...");
            }
            Console.WriteLine("Closing server...");
            isServerStarted = false;
            receiverListener.Stop();
            return 0;
        }
    }        

	///////////////////////////////////////////////////////////////////////////
	 /// <summary>
        /// Przetworzenie eventów
        /// </summary>
        public void dispachEvents()
        {
            if (!msgBoxWindow.IsOpen()) //jeśli okno jest otwarte
            {
                return;
            }else
            {
                msgBoxWindow.DispatchEvents();
            }
        }
        /// <summary>
        /// Inicjacja eventów dla okienka
        /// </summary>
        public void initEvents()
        {
            if(msgBoxWindow.IsOpen())
            {
                msgBoxWindow.Closed += msgBoxWindow_Closed;
            }
        }
        /// <summary>
        /// Event do czyszczenia i zamknięcia okna
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void msgBoxWindow_Closed(object sender, EventArgs e)
        {
            msgBoxWindow.Close();
        }
        /// <summary>
        /// Wyświetlenie okna
        /// </summary>
        public virtual void display()
        {
            this.msgBoxWindow.Clear(Color.Black);
            this.msgBoxWindow.Display();
        }
        /// <summary>
        /// Metoda wirtualna do wyświetlania elementów okna.
        /// </summary>
        public virtual void draw()
        {
        }
        /// <summary>
        /// Okno renderu służące do wyświetlenia elementów okna.
        /// </summary>
        private RenderWindow msgBoxWindow;
        /// <summary>
        /// Informacje o wielkości okna
        /// </summary>
        private VideoMode msgBoxVideoMode;
        /// <summary>
        /// Tytuł okna
        /// </summary>
        private string msgBoxTitle = " ";